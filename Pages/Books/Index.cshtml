@page "/"
@model Grigorovici_Tonia_Siemens_Internship.Pages.Books.IndexModel

@{
    ViewData["Title"] = "Books";
}

<h1>Books</h1>

<p>
    <a asp-page="Create">Create Book</a>
</p>
<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find Book Title/Author:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" />
        </p>
    </div>
</form>
<form asp-page="./Index" method="get">
    <div class="form-group">
        <input type="hidden" name="showAvailableOnly" value="true" />
        <input type="hidden" name="searchString" value="@Model.CurrentFilter" />
        <button type="submit" class="btn btn-success">Available Books</button>
    </div>
</form>
<a asp-page="./Index">Back to full list</a>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].Title) <br />
                <a asp-page="./Index" asp-route-sortOrder="@Model.TitleSort" asp-route-searchString="@Model.CurrentFilter" asp-route-showAvailableOnly="@(Request.Query["showAvailableOnly"])">
                    Sort by Title
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].Author) <br />
                <a asp-page="./Index" asp-route-sortOrder="@Model.AuthorSort" asp-route-searchString="@Model.CurrentFilter" asp-route-showAvailableOnly="@(Request.Query["showAvailableOnly"])">
                    Sort by Author
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].BookCategories)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].AvailableQuantity)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.BookD.Books)
        {
            string selectedRow = "";
            if (item.ID == Model.SelectedBookID)
            {
                selectedRow = "selected";
            }
            else
            {
                selectedRow = "";
            }
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Author.FullName)
            </td>
            <td>
                    @{
                        foreach (var category in item.BookCategories)
                        {
                            @category.Category.CategoryName <br />
                        }
                    }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Quantity)
            </td>
            <td>
                    @if (item.AvailableQuantity == 0)
                    {
                        <span class="text-danger">All books are currently borrowed.</span>
                    }
                    else
                    {
                        <span class="text-success">@Html.DisplayFor(modelItem => item.AvailableQuantity)</span>
                    }
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.ID">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.ID">Details</a> |
                    @if (item.Quantity == item.AvailableQuantity)
                    {
                        <a asp-page="./Delete" asp-route-id="@item.ID">Delete</a>
                    }
					else
					{
						<span class="text-danger">Cannot delete borrowed books.</span>
					}
            </td>
        </tr>
}
    </tbody>
</table>
